// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: banner_rotation.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BannerRotation_AddBanner_FullMethodName    = "/grpc.BannerRotation/AddBanner"
	BannerRotation_DeleteBanner_FullMethodName = "/grpc.BannerRotation/DeleteBanner"
	BannerRotation_ClickBanner_FullMethodName  = "/grpc.BannerRotation/ClickBanner"
	BannerRotation_GetBanner_FullMethodName    = "/grpc.BannerRotation/GetBanner"
)

// BannerRotationClient is the client API for BannerRotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotationClient interface {
	AddBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClickBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
}

type bannerRotationClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotationClient(cc grpc.ClientConnInterface) BannerRotationClient {
	return &bannerRotationClient{cc}
}

func (c *bannerRotationClient) AddBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BannerRotation_AddBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) DeleteBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BannerRotation_DeleteBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) ClickBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BannerRotation_ClickBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) GetBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	out := new(BannerResponse)
	err := c.cc.Invoke(ctx, BannerRotation_GetBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotationServer is the server API for BannerRotation service.
// All implementations must embed UnimplementedBannerRotationServer
// for forward compatibility
type BannerRotationServer interface {
	AddBanner(context.Context, *BannerRequest) (*empty.Empty, error)
	DeleteBanner(context.Context, *BannerRequest) (*empty.Empty, error)
	ClickBanner(context.Context, *BannerRequest) (*empty.Empty, error)
	GetBanner(context.Context, *BannerRequest) (*BannerResponse, error)
	mustEmbedUnimplementedBannerRotationServer()
}

// UnimplementedBannerRotationServer must be embedded to have forward compatible implementations.
type UnimplementedBannerRotationServer struct {
}

func (UnimplementedBannerRotationServer) AddBanner(context.Context, *BannerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannerRotationServer) DeleteBanner(context.Context, *BannerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedBannerRotationServer) ClickBanner(context.Context, *BannerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickBanner not implemented")
}
func (UnimplementedBannerRotationServer) GetBanner(context.Context, *BannerRequest) (*BannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (UnimplementedBannerRotationServer) mustEmbedUnimplementedBannerRotationServer() {}

// UnsafeBannerRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotationServer will
// result in compilation errors.
type UnsafeBannerRotationServer interface {
	mustEmbedUnimplementedBannerRotationServer()
}

func RegisterBannerRotationServer(s grpc.ServiceRegistrar, srv BannerRotationServer) {
	s.RegisterService(&BannerRotation_ServiceDesc, srv)
}

func _BannerRotation_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).AddBanner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).DeleteBanner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_ClickBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).ClickBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_ClickBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).ClickBanner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_GetBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).GetBanner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerRotation_ServiceDesc is the grpc.ServiceDesc for BannerRotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerRotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.BannerRotation",
	HandlerType: (*BannerRotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _BannerRotation_AddBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _BannerRotation_DeleteBanner_Handler,
		},
		{
			MethodName: "ClickBanner",
			Handler:    _BannerRotation_ClickBanner_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _BannerRotation_GetBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banner_rotation.proto",
}
